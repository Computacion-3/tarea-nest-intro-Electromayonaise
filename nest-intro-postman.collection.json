{
  "info": {
    "name": "tarea-nest-intro API (Newman-ready)",
    "_postman_id": "d7a0b8e6-2f4f-4f4c-9d77-0b2fb7c1f9ab",
    "description": "Colección generada para probar endpoints de /, /roles, /permissions, /users y /games en la app Nest. Ordenada para ejecución con Newman.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    { "key": "baseUrl", "value": "http://localhost:3000" },
    { "key": "roleId", "value": "" },
    { "key": "permissionId", "value": "" },
    { "key": "userId", "value": "" },
    { "key": "gameId", "value": "" }
  ],
  "item": [
    {
      "name": "Health",
      "item": [
        {
          "name": "GET /",
          "request": {
            "method": "GET",
            "header": [],
            "url": { "raw": "{{baseUrl}}/", "host": ["{{baseUrl}}"], "path": [""] }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status 200', () => pm.response.to.have.status(200));",
                  "pm.test('Body is Hello World!', () => pm.expect(pm.response.text()).to.eql('Hello World!'));"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Roles",
      "item": [
        {
          "name": "POST /roles (create role: player)",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"player\",\n  \"description\": \"Standard player role\"\n}"
            },
            "url": { "raw": "{{baseUrl}}/roles", "host": ["{{baseUrl}}"], "path": ["roles"] }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status 201', () => pm.response.to.have.status(201));",
                  "const json = pm.response.json();",
                  "pm.expect(json).to.have.property('id');",
                  "pm.collectionVariables.set('roleId', json.id);"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /roles",
          "request": {
            "method": "GET",
            "header": [],
            "url": { "raw": "{{baseUrl}}/roles", "host": ["{{baseUrl}}"], "path": ["roles"] }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status 200', () => pm.response.to.have.status(200));",
                  "pm.test('Returns array', () => pm.expect(pm.response.json()).to.be.an('array'));"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /roles/:id",
          "request": {
            "method": "GET",
            "header": [],
            "url": { "raw": "{{baseUrl}}/roles/{{roleId}}", "host": ["{{baseUrl}}"], "path": ["roles", "{{roleId}}"] }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status 200', () => pm.response.to.have.status(200));",
                  "pm.test('Has id', () => pm.expect(pm.response.json()).to.have.property('id', Number(pm.collectionVariables.get('roleId'))));"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "PATCH /roles/:id",
          "request": {
            "method": "PATCH",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": { "mode": "raw", "raw": "{\n  \"description\": \"Updated player role\"\n}" },
            "url": { "raw": "{{baseUrl}}/roles/{{roleId}}", "host": ["{{baseUrl}}"], "path": ["roles", "{{roleId}}"] }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status 200', () => pm.response.to.have.status(200));",
                  "pm.test('Description updated', () => pm.expect(pm.response.json().description).to.eql('Updated player role'));"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Permissions",
      "item": [
        {
          "name": "POST /permissions (create)",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"key\": \"users.read\",\n  \"description\": \"Read users\"\n}"
            },
            "url": { "raw": "{{baseUrl}}/permissions", "host": ["{{baseUrl}}"], "path": ["permissions"] }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status 201', () => pm.response.to.have.status(201));",
                  "const json = pm.response.json();",
                  "pm.collectionVariables.set('permissionId', json.id);",
                  "pm.expect(json).to.have.property('key', 'users.read');"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /permissions",
          "request": {
            "method": "GET",
            "header": [],
            "url": { "raw": "{{baseUrl}}/permissions", "host": ["{{baseUrl}}"], "path": ["permissions"] }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status 200', () => pm.response.to.have.status(200));",
                  "pm.test('Returns array', () => pm.expect(pm.response.json()).to.be.an('array'));"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /permissions/:id",
          "request": {
            "method": "GET",
            "header": [],
            "url": { "raw": "{{baseUrl}}/permissions/{{permissionId}}", "host": ["{{baseUrl}}"], "path": ["permissions", "{{permissionId}}"] }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status 200', () => pm.response.to.have.status(200));",
                  "pm.test('Has id', () => pm.expect(pm.response.json()).to.have.property('id', Number(pm.collectionVariables.get('permissionId'))));"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "PATCH /permissions/:id",
          "request": {
            "method": "PATCH",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": { "mode": "raw", "raw": "{\n  \"description\": \"Updated permission desc\"\n}" },
            "url": { "raw": "{{baseUrl}}/permissions/{{permissionId}}", "host": ["{{baseUrl}}"], "path": ["permissions", "{{permissionId}}"] }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status 200', () => pm.response.to.have.status(200));",
                  "pm.test('Description updated', () => pm.expect(pm.response.json().description).to.eql('Updated permission desc'));"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Users",
      "item": [
        {
          "name": "POST /users (create; uses roleName=player)",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"user_{{$timestamp}}\",\n  \"email\": \"user_{{$timestamp}}@example.com\",\n  \"passwordHash\": \"hash-{{$guid}}\",\n  \"bio\": \"Test user\",\n  \"roleName\": \"player\"\n}"
            },
            "url": { "raw": "{{baseUrl}}/users", "host": ["{{baseUrl}}"], "path": ["users"] }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status 201', () => pm.response.to.have.status(201));",
                  "const json = pm.response.json();",
                  "pm.collectionVariables.set('userId', json.id);",
                  "pm.expect(json).to.have.property('role');"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /users",
          "request": {
            "method": "GET",
            "header": [],
            "url": { "raw": "{{baseUrl}}/users", "host": ["{{baseUrl}}"], "path": ["users"] }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status 200', () => pm.response.to.have.status(200));",
                  "pm.test('Returns array', () => pm.expect(pm.response.json()).to.be.an('array'));"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /users/:id",
          "request": {
            "method": "GET",
            "header": [],
            "url": { "raw": "{{baseUrl}}/users/{{userId}}", "host": ["{{baseUrl}}"], "path": ["users", "{{userId}}"] }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status 200', () => pm.response.to.have.status(200));",
                  "pm.test('Has id', () => pm.expect(pm.response.json()).to.have.property('id', Number(pm.collectionVariables.get('userId'))));",
                  "pm.test('Has role eager-loaded', () => pm.expect(pm.response.json()).to.have.property('role'));"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "PATCH /users/:id",
          "request": {
            "method": "PATCH",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": { "mode": "raw", "raw": "{\n  \"bio\": \"Updated bio\"\n}" },
            "url": { "raw": "{{baseUrl}}/users/{{userId}}", "host": ["{{baseUrl}}"], "path": ["users", "{{userId}}"] }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status 200', () => pm.response.to.have.status(200));",
                  "pm.test('Bio updated', () => pm.expect(pm.response.json().bio).to.eql('Updated bio'));"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Games",
      "item": [
        {
          "name": "POST /games (create; uses ownerId from userId)",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"My Game {{$timestamp}}\",\n  \"description\": \"Test game\",\n  \"ownerId\": {{userId}}\n}"
            },
            "url": { "raw": "{{baseUrl}}/games", "host": ["{{baseUrl}}"], "path": ["games"] }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status 201', () => pm.response.to.have.status(201));",
                  "const json = pm.response.json();",
                  "pm.collectionVariables.set('gameId', json.id);",
                  "pm.test('Owner eager-loaded', () => pm.expect(json).to.have.property('owner'));"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /games",
          "request": {
            "method": "GET",
            "header": [],
            "url": { "raw": "{{baseUrl}}/games", "host": ["{{baseUrl}}"], "path": ["games"] }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status 200', () => pm.response.to.have.status(200));",
                  "pm.test('Returns array', () => pm.expect(pm.response.json()).to.be.an('array'));"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /games/:id",
          "request": {
            "method": "GET",
            "header": [],
            "url": { "raw": "{{baseUrl}}/games/{{gameId}}", "host": ["{{baseUrl}}"], "path": ["games", "{{gameId}}"] }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status 200', () => pm.response.to.have.status(200));",
                  "pm.test('Has id', () => pm.expect(pm.response.json()).to.have.property('id', Number(pm.collectionVariables.get('gameId'))));"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "PATCH /games/:id",
          "request": {
            "method": "PATCH",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": { "mode": "raw", "raw": "{\n  \"description\": \"Updated game description\"\n}" },
            "url": { "raw": "{{baseUrl}}/games/{{gameId}}", "host": ["{{baseUrl}}"], "path": ["games", "{{gameId}}"] }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status 200', () => pm.response.to.have.status(200));",
                  "pm.test('Description updated', () => pm.expect(pm.response.json().description).to.eql('Updated game description'));"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Cleanup (created entities)",
      "item": [
        {
          "name": "DELETE /games/:id",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": { "raw": "{{baseUrl}}/games/{{gameId}}", "host": ["{{baseUrl}}"], "path": ["games", "{{gameId}}"] }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status 200 / 404 allowed', () => pm.expect([200,404]).to.include(pm.response.code));"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "DELETE /users/:id",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": { "raw": "{{baseUrl}}/users/{{userId}}", "host": ["{{baseUrl}}"], "path": ["users", "{{userId}}"] }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status 200 / 404 allowed', () => pm.expect([200,404]).to.include(pm.response.code));"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "DELETE /permissions/:id",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": { "raw": "{{baseUrl}}/permissions/{{permissionId}}", "host": ["{{baseUrl}}"], "path": ["permissions", "{{permissionId}}"] }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status 200 / 404 allowed', () => pm.expect([200,404]).to.include(pm.response.code));"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "DELETE /roles/:id",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": { "raw": "{{baseUrl}}/roles/{{roleId}}", "host": ["{{baseUrl}}"], "path": ["roles", "{{roleId}}"] }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status 200 / 404 allowed', () => pm.expect([200,404]).to.include(pm.response.code));"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    }
  ]
}
